HIST_STAMPS="yyyy-mm-dd"
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
#setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
setopt HIST_BEEP                 # Beep when accessing nonexistent history.

export TERM="xterm-256color"
export EDITOR=nvim
# fzf
export FZF_TMUX=0
export FZF_DEFAULT_OPTS="--height 100% --reverse"
export TZ=America/Vancouver
# tell less not to paginate if less than a page
export LESS='-F -X -isMR --shift 5'

. $HOME/.asdf/asdf.sh

## switch to emacs mode after setting editor, which changes the mode
bindkey -e
# speifically make delete key work
bindkey -a '^[[3~' delete-char
# up/down to search back the zsh history
autoload -U history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^[[A" history-beginning-search-backward-end
bindkey "^[[B" history-beginning-search-forward-end
## From: https://unix.stackexchange.com/questions/258656/how-can-i-delete-to-a-slash-or-a-word-in-zsh
# This way you can use ctrl+w for deleting a Word (in vim lingo) and alt+bkspc to delete a word
backward-kill-dir () {
    local WORDCHARS=${WORDCHARS/\/}
    zle backward-kill-word
}
zle -N backward-kill-dir
bindkey '^[^?' backward-kill-dir

## Setup all the paths stuff
if [ -e "$HOME/bin" ]; then export PATH="$HOME/bin:$PATH"; fi
if [ -e "$HOME/.npm-global/bin" ]; then export PATH="$HOME/.npm-global/bin:$PATH"; fi
if [ -e "$HOME/.local/bin" ]; then export PATH="$HOME/.local/bin:$PATH"; fi
if [ -e "$HOME/.yarn/bin" ]; then export PATH="$HOME/.yarn/bin:$PATH"; fi
if [ -e "$HOME/.config/yarn/global/node_modules/.bin" ]; then export PATH="$HOME/.config/yarn/global/node_modules/.bin:$PATH"; fi
if [ -e "/opt/google-cloud-sdk/bin" ]; then export PATH="/opt/google-cloud-sdk/bin:$PATH"; fi
if [ -e "$GOPATH" ]; then export PATH="$GOPATH/bin:$PATH"; fi
if [ -e "/mnt/c/Program Files/Microsoft VS Code/bin" ]; then export PATH="$PATH:/mnt/c/Program Files/Microsoft VS Code/bin"; fi
if [ -e "/mnt/c/Windows/System32/" ]; then export PATH="$PATH:/mnt/c/Windows/System32"; fi
if [ -e "/Applications/Visual Studio Code.app/Contents/Resources/app/bin" ]; then export PATH="$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin"; fi

## START https://github.com/justjanne/powerline-go
function powerline_precmd() {
  PS1="$($HOME/go/bin/powerline-go -error $? -shell zsh -modules termtitle,venv,ssh,cwd,perms,git,jobs,exit,root -cwd-max-depth 2 -numeric-exit-codes)"
}

function install_powerline_precmd() {
  for s in "${precmd_functions[@]}"; do
    if [ "$s" = "powerline_precmd" ]; then
      return
    fi
  done
  precmd_functions+=(powerline_precmd)
}

if [ "$TERM" != "linux" ]; then
    install_powerline_precmd
fi
### END https://github.com/b-ryan/powerline-shell

### START 'bash' completion
autoload -U +X compinit && compinit
autoload -U +X bashcompinit && bashcompinit
zstyle ':completion:*:*:git:*' script /usr/local/completion/git-completion.zsh
command -v kubectl 2>/dev/null 1>/dev/null && source <(kubectl completion zsh)
command -v docc 2>/dev/null 1>/dev/null && source <(SYSLOG_OFF=true docc completion zsh)
TMUXINATOR_COMPLETION_PATH="$(ruby -e 'require "tmuxinator"; puts File.join(File.dirname(File.dirname($LOADED_FEATURES.select { |file| file.include?("/lib/tmuxinator.rb") }.first)), "completion", "tmuxinator.zsh")' 2>/dev/null)"
test -z "$TMUXINATOR_COMPLETION_PATH" || source $TMUXINATOR_COMPLETION_PATH
. $HOME/.asdf/completions/asdf.bash
### END 'bash' completion

# Full zsh support
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

## Some aliases I really like
alias ag="ag --color-path 35 --color-match '1;35' --color-line-number 32"
alias ncu="npx -p npm-check-updates ncu"
alias bfg="docker run -it --rm -v \$(readlink -m $(pwd)):/code -w /code donderom/bfg-repo-cleaner"
alias webbie="python -m SimpleHTTPServer"
alias kexec='kubectl exec -it $(kubectl get pod -o jsonpath="{.items[0].metadata.name}")'
alias klogs='kubectl logs $(kubectl get pod -o jsonpath="{.items[0].metadata.name}")'
alias tmux='tmux -2'
alias youtube-dl='docker run --rm --user $UID:$GID -v $PWD:/downloads wernight/youtube-dl'
alias docker_run_pwd='docker run -it --rm -w $PWD -v $PWD:$PWD -u $UID:$GID'
alias docker_run='docker run -it --rm -v $PWD:$PWD -u $UID:$GID'
alias sniff="sudo ngrep -d 'en1' -t '^(GET|POST) ' 'tcp and port 80'"
alias httpdump="sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E \"Host\: .*|GET \/.*\""
alias todo="todoist list --filter '(overdue | today)'"
alias vim=nvim
command -v docc 2>/dev/null 1>/dev/null && alias docc='SYSLOG_OFF=true docc'

# Check for various OS openers. Quit as soon as we find one that works.
for opener in browser-exec xdg-open cmd.exe cygstart "start" open; do
  if command -v $opener >/dev/null 2>&1; then
    if [[ "$opener" == "cmd.exe" ]]; then
      # shellcheck disable=SC2139
      alias open="$opener /c start";
    else
      # shellcheck disable=SC2139
      alias open="$opener";
    fi
    break;
  fi
done
# direnv
source <(direnv hook zsh)

if [ -z "$(pgrep dirmngr)" ]; then
  eval $(dirmngr --homedir $HOME/.gnupg --daemon)
fi

# START FROM https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/plugins/gpg-agent/gpg-agent.plugin.zsh
# Enable gpg-agent if it is not running-
# --use-standard-socket will work from version 2 upwards
AGENT_SOCK=$(gpgconf --list-dirs | grep agent-socket | cut -d : -f 2)

if [[ ! -S $AGENT_SOCK ]]; then
  gpg-agent --daemon --use-standard-socket &>/dev/null
fi
export GPG_TTY=$TTY

# Set SSH to use gpg-agent if it's enabled
GNUPGCONFIG="${GNUPGHOME:-"$HOME/.gnupg"}/gpg-agent.conf"
if [[ -r $GNUPGCONFIG ]] && command grep -q enable-ssh-support "$GNUPGCONFIG"; then
  export SSH_AUTH_SOCK="$AGENT_SOCK.ssh"
  unset SSH_AGENT_PID
fi
# END FROM https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/plugins/gpg-agent/gpg-agent.plugin.zsh
# START FROM https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/plugins/ssh-agent/ssh-agent.plugin.zsh
typeset _agent_forwarding _ssh_env_cache

function _start_agent() {
  local lifetime
  zstyle -s :omz:plugins:ssh-agent lifetime lifetime

  # start ssh-agent and setup environment
  echo Starting ssh-agent...
  ssh-agent -s ${lifetime:+-t} ${lifetime} | sed 's/^echo/#echo/' >! $_ssh_env_cache
  chmod 600 $_ssh_env_cache
  . $_ssh_env_cache > /dev/null
}

function _add_identities() {
  local id line sig lines
  local -a identities loaded_sigs loaded_ids not_loaded
  zstyle -a :omz:plugins:ssh-agent identities identities

  # check for .ssh folder presence
  if [[ ! -d $HOME/.ssh ]]; then
    return
  fi

  # add default keys if no identities were set up via zstyle
  # this is to mimic the call to ssh-add with no identities
  if [[ ${#identities} -eq 0 ]]; then
    # key list found on `ssh-add` man page's DESCRIPTION section
    for id in id_rsa id_dsa id_ecdsa id_ed25519 identity; do
      # check if file exists
      [[ -f "$HOME/.ssh/$id" ]] && identities+=$id
    done
  fi

  # get list of loaded identities' signatures and filenames
  if lines=$(ssh-add -l); then
    for line in ${(f)lines}; do
      loaded_sigs+=${${(z)line}[2]}
      loaded_ids+=${${(z)line}[3]}
    done
  fi

  # add identities if not already loaded
  for id in $identities; do
    # check for filename match, otherwise try for signature match
    if [[ ${loaded_ids[(I)$HOME/.ssh/$id]} -le 0 ]]; then
      sig="$(ssh-keygen -lf "$HOME/.ssh/$id" | awk '{print $2}')"
      [[ ${loaded_sigs[(I)$sig]} -le 0 ]] && not_loaded+="$HOME/.ssh/$id"
    fi
  done

  [[ -n "$not_loaded" ]] && ssh-add ${^not_loaded}
}

# Get the filename to store/lookup the environment from
_ssh_env_cache="$HOME/.ssh/environment-$SHORT_HOST"

# test if agent-forwarding is enabled
zstyle -b :omz:plugins:ssh-agent agent-forwarding _agent_forwarding

if [[ $_agent_forwarding == "yes" && -n "$SSH_AUTH_SOCK" ]]; then
  # Add a nifty symlink for screen/tmux if agent forwarding
  [[ -L $SSH_AUTH_SOCK ]] || ln -sf "$SSH_AUTH_SOCK" /tmp/ssh-agent-$USER-screen
elif [[ -f "$_ssh_env_cache" ]]; then
  # Source SSH settings, if applicable
  . $_ssh_env_cache > /dev/null
  if [[ $USER == "root" ]]; then
    FILTER="ax"
  else
    FILTER="x"
  fi
  ps $FILTER | grep ssh-agent | grep -q $SSH_AGENT_PID || {
    _start_agent
  }
else
  _start_agent
fi

_add_identities

# tidy up after ourselves
unset _agent_forwarding _ssh_env_cache
unfunction _start_agent _add_identities
# END FROM https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/plugins/ssh-agent/ssh-agent.plugin.zsh
