HIST_STAMPS="yyyy-mm-dd"
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
#setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
setopt HIST_BEEP                 # Beep when accessing nonexistent history.

export TERM="${TERM:-xterm-256color}"
export EDITOR=nvim
export TZ=America/Vancouver
# tell less not to paginate if less than a page
export LESS='-F -X -isMR --shift 5'
# fzf
# ignore node_modules from fzf
export FZF_TMUX=0
export FZF_DEFAULT_COMMAND='fd --type f --follow'
export FZF_DEFAULT_OPTS='--height 100% --multi --layout=reverse-list --inline-info'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_CTRL_T_OPTS="--preview 'bat --color=always --line-range :500 {}'"

export ASDF_DATA_DIR="$HOME/.asdf"
export PATH="$ASDF_DATA_DIR/shims:$PATH"
if [ -f $HOME/.asdf/plugins/java/set-java-home.zsh ]; then source $HOME/.asdf/plugins/java/set-java-home.zsh; fi
command -v asdf 2>/dev/null 1>/dev/null && source <(asdf completion zsh)

## switch to emacs mode after setting editor, which changes the mode
bindkey -e
# speifically make delete key work
bindkey -a '^[[3~' delete-char
# up/down to search back the zsh history
autoload -U history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "$key[Up]" history-beginning-search-backward-end
bindkey "$key[Down]" history-beginning-search-forward-end
## From: https://unix.stackexchange.com/questions/258656/how-can-i-delete-to-a-slash-or-a-word-in-zsh
# This way you can use ctrl+w for deleting a Word (in vim lingo) and alt+bkspc to delete a word
backward-kill-dir() {
  local WORDCHARS=${WORDCHARS/\/}
  zle backward-kill-word
}
zle -N backward-kill-dir
bindkey '^[^?' backward-kill-dir

yaml_validate() {
  python -c 'import sys, yaml, json; yaml.safe_load(sys.stdin.read())'
}

yaml2json() {
  python -c 'import sys, yaml, json; print(json.dumps(yaml.safe_load(sys.stdin.read())))'
}

yaml2json_pretty() {
  python -c 'import sys, yaml, json; print(json.dumps(yaml.safe_load(sys.stdin.read()), indent=2, sort_keys=False))'
}

json_validate() {
  python -c 'import sys, yaml, json; json.loads(sys.stdin.read())'
}

json2yaml() {
  python -c 'import sys, yaml, json; print(yaml.dump(json.loads(sys.stdin.read())))'
}

tmux_jump() {
  # starting in ~/code...
  BASE="$HOME/git"
  # ... look for directories exactly two levels deep (`~/code/owner/project`)
  # and match them with fzf. In this case we break ties by favoring matches
  # on the project name instead of the owner name (implementation means
  # favoring matches closer to the end of the string.) This is simplified a
  # little bit with the `--select-1 --query="$1"` line: if there's only one
  # match for the argument passed in as the first argument to this function,
  # we select immediately instead of asking for an interactive selection.
  SELECTED=$(find "$BASE" -mindepth 2 -maxdepth 2 -type d | sed "s|$BASE/||g" | fzf --tiebreak=end --select-1 --query="$1")

  # fzf will exit with a non-zero code if you ctrl-c or ctrl-g out of
  # it. We use this as a signal that we don't want to jump after all.
  if [[ "$?" != 0 ]]; then echo "cancelling!"; return 1; fi

  # call tmux-session on the *full* path to the matched project!
  tmux-session "$BASE/$SELECTED"
}

if [ -d /etc/profile.d ]; then
for i in /etc/profile.d/*.sh; do
  if [ -r $i ]; then
    . $i
  fi
done
unset i
fi

## Setup all the paths stuff
if [ -e "$HOME/bin" ]; then export PATH="$HOME/bin:$PATH"; fi
if [ -e "$HOME/.local/bin" ]; then export PATH="$HOME/.local/bin:$PATH"; fi
if [ -e "$HOME/.fzf/bin" ]; then export PATH="$HOME/.fzf/bin:$PATH"; fi
if [ -e "$HOME/.npm-global/bin" ]; then export PATH="$HOME/.npm-global/bin:$PATH"; fi
if [ -e "$HOME/.local/bin" ]; then export PATH="$HOME/.local/bin:$PATH"; fi
if [ -e "$HOME/.yarn/bin" ]; then export PATH="$HOME/.yarn/bin:$PATH"; fi
if [ -e "$HOME/.config/yarn/global/node_modules/.bin" ]; then export PATH="$HOME/.config/yarn/global/node_modules/.bin:$PATH"; fi
if [ -e "/opt/google-cloud-sdk/bin" ]; then export PATH="/opt/google-cloud-sdk/bin:$PATH"; fi
if [ -e "$GOPATH" ]; then export PATH="$GOPATH/bin:$PATH"; fi
if [ -e "/mnt/c/Program Files/Microsoft VS Code/bin" ]; then export PATH="$PATH:/mnt/c/Program Files/Microsoft VS Code/bin"; fi
if [ -e "/mnt/c/Program Files/Tailscale" ]; then export PATH="$PATH:/mnt/c/Program Files/Tailscale"; fi
if [ -e "/mnt/c/Windows/System32/" ]; then export PATH="$PATH:/mnt/c/Windows/System32"; fi
if [ -e "/Applications/Visual Studio Code.app/Contents/Resources/app/bin" ]; then export PATH="$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin"; fi
if [ -e "/mnt/c/Program Files/RedHat/Podman/" ]; then export PATH="$PATH:/mnt/c/Program Files/RedHat/Podman/"; fi
if [ -e "${KREW_ROOT:-$HOME/.krew}" ]; then export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"; fi
if [ -e "$HOME/.dotnet/tools" ]; then export PATH="$PATH:$HOME/.dotnet/tools"; fi
{% if windows_username is defined and windows_username|length -%}
if [ -e "/mnt/c/Users/{{ windows_username }}/AppData/Local/Microsoft/WindowsApps" ]; then export PATH="$PATH:/mnt/c/Users/{{ windows_username }}/AppData/Local/Microsoft/WindowsApps"; fi
if [ -e "/mnt/c/Users/{{ windows_username }}/AppData/Roaming/Code/User/globalStorage/ms-vscode-remote.remote-containers" ]; then export PATH="$PATH:/mnt/c/Users/{{ windows_username }}/AppData/Roaming/Code/User/globalStorage/ms-vscode-remote.remote-containers"; fi
{% endif -%}

eval "$(starship init zsh)"

### START 'bash' completion
autoload -U +X compinit && compinit
autoload -U +X bashcompinit && bashcompinit
zstyle ':completion:*:*:git:*' script /usr/local/completion/git-completion.zsh
command -v kubectl 2>/dev/null 1>/dev/null && source <(kubectl completion zsh)
command -v helm 2>/dev/null 1>/dev/null && source <(helm completion zsh)
command -v doctl 2>/dev/null 1>/dev/null && source <(doctl completion zsh)
command -v npm 2>/dev/null 1>/dev/null && source <(npm completion)
command -v gh 2>/dev/null 1>/dev/null && source <(gh completion -s zsh)
command -v k9s 2>/dev/null 1>/dev/null && source <(k9s completion zsh)
command -v stern 2>/dev/null 1>/dev/null && source <(stern --completion zsh)
TMUXINATOR_COMPLETION_PATH="$(ruby -e 'require "tmuxinator"; puts File.join(File.dirname(File.dirname($LOADED_FEATURES.select { |file| file.include?("/lib/tmuxinator.rb") }.first)), "completion", "tmuxinator.zsh")' 2>/dev/null)"
test -z "$TMUXINATOR_COMPLETION_PATH" || source $TMUXINATOR_COMPLETION_PATH
### END 'bash' completion

# Full zsh support
if [ -f ~/.fzf/shell/key-bindings.zsh ]; then source ~/.fzf/shell/key-bindings.zsh; fi 
if [ -f ~/.fzf/shell/completion.zsh ]; then source ~/.fzf/shell/completion.zsh; fi 

## Some aliases I really like
alias ag="ag --color-path 35 --color-match '1;35' --color-line-number 32"
alias ncu="npx -p npm-check-updates ncu"
alias bfg="docker run -it --rm -v \$(readlink -m $(pwd)):/code -w /code donderom/bfg-repo-cleaner"
alias webbie="python3 -m http.server"
alias kexec='kubectl exec -it $(kubectl get pod -o jsonpath="{.items[0].metadata.name}")'
alias klogs='kubectl logs $(kubectl get pod -o jsonpath="{.items[0].metadata.name}")'
alias tmux='tmux -u'
alias docker_run_pwd='docker run -it --rm -w $PWD -v $PWD:$PWD -u $UID:$GID'
alias docker_run='docker run -it --rm -v $PWD:$PWD -u $UID:$GID'
alias sniff="sudo ngrep -d 'en1' -t '^(GET|POST) ' 'tcp and port 80'"
alias httpdump="sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E \"Host\: .*|GET \/.*\""
alias todo="todoist list --filter '(overdue | today)'"
alias ls='lsd'
command -v xclip 2>/dev/null 1>/dev/null && alias pbcopy='xclip -selection clipboard'
command -v xclip 2>/dev/null 1>/dev/null && alias pbpaste='xclip -selection clipboard -o'

# Check for various OS openers. Quit as soon as we find one that works.
for opener in browser-exec xdg-open cmd.exe cygstart "start" open; do
if command -v $opener >/dev/null 2>&1; then
  if [[ "$opener" == "cmd.exe" ]]; then
    # shellcheck disable=SC2139
    alias open="$opener /c start";
  else
    # shellcheck disable=SC2139
    alias open="$opener";
  fi
  break;
fi
done
# direnv
source <(direnv hook zsh)

if [ -z "$(pgrep dirmngr)" ]; then
eval $(dirmngr --homedir $HOME/.gnupg --daemon)
fi

if command -v ssh-to-age 2>/dev/null 1>/dev/null; then
  if [ -f ~/.ssh/id_ed25519 ]; then export SOPS_AGE_KEY=$(ssh-to-age -private-key < ~/.ssh/id_ed25519); fi
fi

{% if zsh_use_ssh_plugin %}
source ~/.zsh/ssh-agent.plugin.zsh
{% endif %}
{% if zsh_use_ssh_auth_sock_link %}
if [[ -n "$SSH_AUTH_SOCK" && ! -L "$SSH_AUTH_SOCK" ]]; then
ln -sf "$SSH_AUTH_SOCK" $HOME/.ssh/ssh_auth_sock
fi
{% endif %}

if [ -f /opt/android/android-sdk-linux ]; then
export ANDROID_HOME=/opt/android/android-sdk-linux
export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools
fi
eval "$(zoxide init zsh --cmd j)"

{{ zsh_group_config }}
{{ zsh_host_config }}
